{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","_ref","name","id","email","react_default","a","createElement","className","alt","src","concat","CardList","cards","data","map","card","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","components_SearchBox","value","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","robots","dispatch","e","payload","target","fetch","res","json","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4b11b5a2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"tachyons\";\n\nconst Card = ({ name, id, email }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}test1?size=200x200`} />\n      <div className=\"\">\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ data }) => {\n  const cards = data.map(card => (\n    <Card key={card.id} id={card.id} name={card.name} email={card.email} />\n  ));\n\n  return <div>{cards}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => (\n  <div className=\"pa2\">\n    <input\n      aria-label=\"Search Box\"\n      className=\"pa3 ba b--green bg-lightest-blue\"\n      type=\"text\"\n      placeholder=\"search robots\"\n      onChange={searchChange}\n    />\n  </div>\n);\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div style={{ overflowY: \"scroll\", height: \"800px\" }}>{props.children}</div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport CardList from \"./components/CardList\";\nimport SearchBox from \"./components/SearchBox\";\nimport Scroll from \"./components/Scroll\";\nimport ErrorBoundry from \"./components/ErrorBoundry\";\nimport { connect } from \"react-redux\";\nimport { changeSearchField, requestRobots } from \"./actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    data: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: e => dispatch(changeSearchField(e.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  render() {\n    const { searchField, onSearchChange, data, isPending } = this.props;\n\n    const filterRobots = data.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    if (isPending) {\n      return <p>Loading ...</p>;\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1>Robots Friends</h1>\n          <SearchBox value={searchField} searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList data={filterRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAIL,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nexport const changeSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res => {\n      return res.json();\n    })\n    .then(data => {\n      dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });\n    })\n    .catch(e => {\n      dispatch({ type: REQUEST_ROBOTS_FAIL, payload: e });\n    });\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAIL = \"REQUEST_ROBOTS_FAIL\";\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAIL\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\"\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, isPending: false, robots: action.payload };\n\n    case REQUEST_ROBOTS_FAIL:\n      return { ...state, isPending: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}